character  = ? All Characters ? ;
letter     = "A" | "B" | "C" | "D" | "E" | "F" | "G"
           | "H" | "I" | "J" | "K" | "L" | "M" | "N"
           | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
           | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
           | "c" | "d" | "e" | "f" | "g" | "h" | "i"
           | "j" | "k" | "l" | "m" | "n" | "o" | "p"
           | "q" | "r" | "s" | "t" | "u" | "v" | "w"
           | "x" | "y" | "z" ;
digit      = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
hex digit  = digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
whitespace = ? ASCII 0x20 (Space) ? | ? ASCII 0x09 (Tab) ? ;
eol        = [ ? ASCII 0x0d (Carriage Return) ? ] , ? ASCII 0x0a (Line Feed) ? ;

inline comment = "#" , { character - eol } , eol
               | "//" , { character - eol } , eol ;
block comment  = "(*" , { character - "*)" } , "*)"
               | "/*" , { character - "*/" } , "*/" ;
space          = whitespace | block comment ;
line ending    = inline comment | eol ;

escape code     = "\"
                | "'"
                | '"'
                | "n"
                | "r"
                | "f"
                | "t"
                | "u" , hex digit , hex digit , hex digit , hex digit ;
escape sequence = "\" , escape code ;

string = '"' , { character - '"' - "\" | escape sequence } , '"'
       | "'" , { character - "'" - "\" | escape sequence } , "'" ; (* Still needs support for escape codes *)
number = [ "-" ] , ( digit - "0" , { digit } | "0" ) , [ "." , digit, { digit } ], [ ("e" | "E") , [ "+" | "-" ] , digit , { digit } ] ;
bool   = ( "t" | "T" ) , ( "r" | "R" ) , ( "u" | "U" ) , ( "e" | "E" )
       | ( "f" | "F" ) , ( "a" | "A" ) , ( "l" | "L" ) , ( "s" | "S" ) , ( "e" | "E" ) ;
null   = ( "n" | "N" ) , ( "u" | "U" ) , ( "l" | "L" ) , ( "l" | "L" ) ;
object = "{" , flux , "}" ;
list   = "[" , { space | line ending | value } , "]" ;

terminator = line ending
           | ";" ;
term       = string
           | number
           | bool
           | null
           | object
           | list ;

key   = ( letter | "_" ) , { letter | digit | "_" } | string ;
value = term , { space } , terminator ;

pair = key , { space } , ":" , { space } , value ;
flux = { space | line ending | pair } ;
